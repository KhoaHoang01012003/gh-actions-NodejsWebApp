
name: FULL SCAN

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]
  schedule:
    - cron: '20 20 * * 5'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  # sonarqube 1
  sonarQubeTrigger:
    runs-on: self-hosted
    name: SonarQube Trigger
    steps:
    - name: Checkout the code
      uses: actions/checkout@v4
    - name: SonarQube Scan
      uses: achilleslinux/sonarqube-actions@master
      with:
        host: ${{ secrets.SONARQUBE_HOST }}
        login: ${{ secrets.SONARQUBE_TOKEN }}
        projectKey: test-cloud
    - name: Upload sonarqube report
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  # NPM Audit
  npmaudit:
    permissions: write-all
    name: npm audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.19.0'
      - uses: oke-py/npm-audit-action@v2
        with:
          audit_level: moderate
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_labels: vulnerability,test
          dedupe_issues: true

  # Deploy container, Container Security Scan
  Build_container_and_Container_Security_Scan:
    runs-on: ubuntu-latest
    name: Deploy_container_and_Container_Security_Scan
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
      - name: Start Falco
        uses: falcosecurity/falco-actions/start@main
        with:
            mode: live
            falco-version: '0.39.0'
            verbose: true
      - name: run docker container
        run: |
          docker build -t vulnerable-app:latest -f ./Dockerfile .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-app:latest'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
            sarif_file: trivy-results.sarif
       # checkout the repo
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3
       # Stop Falco
      - name: Stop Falco
        uses: falcosecurity/falco-actions/stop@main
        with:
            mode: live
            verbose: true
      - name: Upload Falco capture
        uses: actions/upload-artifact@v4
        with:
            name: capture         
            path: /tmp/falco.pcap
      - name: Analyze Falco logs
        uses: falcosecurity/falco-actions/analyze@main
        with:
            falco-version: '0.39.0'
            openai-user-prompt: "Pls add remediation steps"
            openai-model: "gpt-3.5-turbo"
            output: "falco-results.json"
            output-format: "json"
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
       # Login to Azure
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        # Build and push the image
      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
            docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/vulnerable-app:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/vulnerable-app:${{ github.sha }}
        # Deploy to Azure Container Instances 1
      - name: 'Deploy to Azure Container Instances'
        uses: 'azure/aci-deploy@v1'
        with:
            resource-group: ${{ secrets.RESOURCE_GROUP }}
            dns-name-label: ${{ secrets.RESOURCE_GROUP }}
            image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/vulnerable-app:${{ github.sha }}
            registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            registry-username: ${{ secrets.REGISTRY_USERNAME }}
            registry-password: ${{ secrets.REGISTRY_PASSWORD }}
            name: aci-vulnerable-app
            location: 'southeastasia'
            ports: 8001
        # ZAP Scan
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
            target: 'http://${{ secrets.RESOURCE_GROUP }}.southeastasia.azurecontainer.io:8001/'
            cmd_options: '-a'
            issue_title: 'ZAP Scan Report'

    



      