
name: FULL SCAN

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]
  schedule:
    - cron: '20 20 * * 5'

permissions:
  contents: read

jobs:

  # njsscan
  njsscan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    name: njsscan code scanning
    steps:
    - name: Checkout the code
      uses: actions/checkout@v4
    - name: nodejsscan scan
      id: njsscan
      uses: ajinabraham/njsscan-action@7237412fdd36af517e2745077cedbf9d6900d711
      with:
        args: '. --sarif --output results.sarif || true'
    - name: Upload njsscan report
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  # NPM Audit
  npmaudit:
    permissions: write-all
    name: npm audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.19.0'
      - uses: oke-py/npm-audit-action@v2
        with:
          audit_level: moderate
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_labels: vulnerability,test
          dedupe_issues: true
  
  # SAST Scan
  sast_scan:
    permissions: write-all
    name: SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: SAST Scan
        uses: AppThreat/sast-scan-action@master
        with:
          type: "python"
      - name: Upload SAST reports
        uses: actions/upload-artifact@v3
        with:
          name: reports
          path: reports


  # Deploy container, Container Security
  Build_container_and_Container_Security_Scan:
    runs-on: ubuntu-latest
    name: Deploy_container_and_Container_Security_Scan
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
      - name: run docker container
        run: |
          docker build -t vulnerable-app:latest -f ./Dockerfile .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-app:latest'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
            sarif_file: trivy-results.sarif
      - name: Run Docker Container
        run: |
          docker run -d -p 8001:8001 vulnerable-app
          sleep 12
          curl -I http://localhost:8001 || exit 1
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
            target: 'http://localhost:8001'
            cmd_options: '-a'
            issue_title: 'ZAP Scan Report'

    
  Deploy_to_Azure_and_ZAP_Scan:
    runs-on: ubuntu-latest
    name: Deploy_to_Azure_and_ZAP_Scan
    permissions: write-all
    steps:
        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@v3
          
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        
        - name: 'Build and push image'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}
        - run: |
            docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/vulnerable-app:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/vulnerable-app:${{ github.sha }}

        - name: 'Deploy to Azure Container Instances'
          uses: 'azure/aci-deploy@v1'
          with:
            resource-group: ${{ secrets.RESOURCE_GROUP }}
            dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
            image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/vulnerable-app:${{ github.sha }}
            registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            registry-username: ${{ secrets.REGISTRY_USERNAME }}
            registry-password: ${{ secrets.REGISTRY_PASSWORD }}
            name: aci-vulnerable-app
            location: 'southeastasia'
            ports: 8001
            environment-variables: PORT=8001 ports=8001 port=8001


      