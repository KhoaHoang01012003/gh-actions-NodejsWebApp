
name: FULL SCAN

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]
  schedule:
    - cron: '20 20 * * 5'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  # sonarqube 1
  # sonarQubeTrigger:
  #   runs-on: self-hosted
  #   name: SonarQube Trigger
  #   steps:
  #   - name: Checkout the code
  #     uses: actions/checkout@v4
  #   - name: SonarQube Scan
  #     uses: KhoaHoang01012003/sonarqube-actions@master
  #     with:
  #       host: http://host.docker.internal:9000
  #       login: ${{ secrets.SONARQUBE_TOKEN }}
  #       projectKey: test-cloud


  # # NPM Audit
  # npmaudit:
  #   permissions: write-all
  #   name: npm audit
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18.19.0'
  #     - uses: oke-py/npm-audit-action@v2
  #       continue-on-error: true
  #       with:
  #         audit_level: moderate
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         issue_labels: vulnerability,test
  #         dedupe_issues: true

  # Deploy container, Container Security Scan
    Deploy_container_and_Container_Security_Scan:
      runs-on: ubuntu-latest
      permissions: write-all
      steps:
        - uses: actions/checkout@v3
        - name: Start Falco sidecar # BƯỚC 1: CÀI ĐẶT VÀ KHỞI ĐỘNG FALCO
          run: |
            docker run -d --name falco --privileged \
              -v /var/run/docker.sock:/host/var/run/docker.sock \
              -v /proc:/host/proc:ro \
              -v $(pwd)/falco_rules.local.yaml:/etc/falco/falco_rules.local.yaml \
              -e HOST_ROOT=/host \
              falcosecurity/falco:latest || {
                echo "Failed to start Falco with custom rules. Using default rules..."
                docker run -d --name falco --privileged \
                  -v /var/run/docker.sock:/host/var/run/docker.sock \
                  -v /proc:/host/proc:ro \
                  -e HOST_ROOT=/host \
                  falcosecurity/falco:latest
              }
                    
        - name: Run Docker container with Falco monitoring # BƯỚC 2: FALCO GIÁM SÁT CONTAINER ỨNG DỤNG
          run: |
            docker build -t vulnerable-app:latest -f ./Dockerfile .
            docker run -d --rm --name app-container vulnerable-app:latest npm start || {
              echo "Failed to start app-container, checking logs..."
              docker logs app-container > app_container_logs.txt 2>&1
              cat app_container_logs.txt
              exit 1
            }
            sleep 60
            echo "Collecting app container logs..."
            docker logs app-container > app-container_logs.txt 2>&1 || echo "Failed to collect app container logs"
            echo "App container logs:"
            cat app-container_logs.txt || echo "Failed to display app-container logs"
            docker exec app-container curl http://example.com || echo "Failed to example.com failed"
            docker ps -a
        - name: Check Falco logs for alerts
          run: |
            echo "Collecting Falco logs..."
            docker logs falco > falco_logs.txt 2>&1
            if [ -f falco_logs.txt ]; then
              echo "Full Falco logs:"
              cat falco_logs.txt
              echo "Checking for warnings or errors in Falco logs..."
              if grep -q -i "WARNING\|ERROR\|CRITICAL" falco_logs.txt; then
                echo "Warnings or errors found in Falco logs, will be recorded for issue creation"
                echo "contains_warnings=true" >> $GITHUB_OUTPUT
              else
                echo "No warnings or errors found in Falco logs"
                echo "contains_warnings=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "Error: falco_logs.txt is empty or not found"
              echo "contains_warnings=true" >> $GITHUB_OUTPUT
              exit 1
            fi
            # Always exit successfully to continue workflow
            exit 0            
            docker ps -a
        - name: Upload Falco logs as artifact
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: falco-logs
            path: falco_logs.txt        
        - name: Stop Falco # BƯỚC 4: DỪNG FALCO
          run: docker stop falco || true
        - name: Create GitHub issue if warnings or failures occur
          if: steps.check-falco-logs.outputs.contains_warnings == 'true' || steps.run-container.outcome == 'failure'
          run: |
            if [ -f falco_logs.txt ] || [ -s app-container_logs.txt ]; then
              WARNINGS=$(grep -i "WARNING\|ERROR\|CRITICAL" falco_logs.txt || echo "No warnings or errors found in Falco logs")
              FULL_FALCO_LOGS=$(cat falco_logs.txt | sed 's/"/\\"/g' | tr '\n' ' ' || echo "Falco logs unavailable")
              APP_LOGS=$(cat app-container_logs.txt | sed 's/"/\\"/g' | tr '\n' ' ' || echo "App container logs unavailable")
              ISSUE_BODY="**Falco and Container Logs from CI Run**\n\n"
              ISSUE_BODY+="The following warnings or errors were detected in the Falco logs (if any):\n\n"
              ISSUE_BODY+="\`\`\`\n$WARNINGS\n\`\`\`\n\n"
              ISSUE_BODY+="**Full Falco Logs**:\n\`\`\`\n$FULL_FALCO_LOGS\n\`\`\`\n\n"
              ISSUE_BODY+="**App Container Logs**:\n\`\`\`\n$APP_LOGS\n\`\`\`\n\n"
              ISSUE_BODY+="**Repository**: ${{ github.repository }}\n"
              ISSUE_BODY+="**Run ID**: ${{ github.run_id }}\n"
              ISSUE_BODY+="**Run URL**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n"
              ISSUE_BODY+="Please review the logs and update the application or Falco rules as needed."
              curl -X POST \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/issues \
                -d "{\"title\":\"Falco and Container Logs for CI Run ${{ github.run_id }}\",\"body\":\"$ISSUE_BODY\"}"
            else
              echo "No logs available, skipping GitHub Issue creation"
            fi
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: 'vulnerable-app:latest'
            exit-code: '0'
            ignore-unfixed: true
            severity: 'CRITICAL,HIGH'
            format: 'sarif'
            output: 'trivy-results.sarif'
        - name: Upload Trivy results
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: trivy-results.sarif
      #  # Login to Azure
      # - name: 'Login via Azure CLI'
      #   uses: azure/login@v1
      #   with:
      #       creds: ${{ secrets.AZURE_CREDENTIALS }}
      #   # Build and push the image
      # - name: 'Build and push image'
      #   uses: azure/docker-login@v1
      #   with:
      #       login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      #       username: ${{ secrets.REGISTRY_USERNAME }}
      #       password: ${{ secrets.REGISTRY_PASSWORD }}
      # - run: |
      #       docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/vulnerable-app:${{ github.sha }}
      #       docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/vulnerable-app:${{ github.sha }}
      #   # Deploy to Azure Container Instances 1
      # - name: 'Deploy to Azure Container Instances'
      #   uses: 'azure/aci-deploy@v1'
      #   with:
      #       resource-group: ${{ secrets.RESOURCE_GROUP }}
      #       dns-name-label: ${{ secrets.RESOURCE_GROUP }}
      #       image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/vulnerable-app:${{ github.sha }}
      #       registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      #       registry-username: ${{ secrets.REGISTRY_USERNAME }}
      #       registry-password: ${{ secrets.REGISTRY_PASSWORD }}
      #       name: aci-vulnerable-app
      #       location: 'southeastasia'
      #       ports: 8001
      #   # ZAP Scan
      # - name: ZAP Scan
      #   uses: zaproxy/action-full-scan@v0.12.0
      #   with:
      #       token: ${{ secrets.GITHUB_TOKEN }}
      #       docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
      #       target: 'http://${{ secrets.RESOURCE_GROUP }}.southeastasia.azurecontainer.io:8001/'
      #       cmd_options: '-a'
      #       issue_title: 'ZAP Scan Report'

    



      